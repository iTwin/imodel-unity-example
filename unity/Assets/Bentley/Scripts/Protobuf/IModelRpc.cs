// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: IModelRpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bentley.Protobuf {

  /// <summary>Holder for reflection information generated from IModelRpc.proto</summary>
  public static partial class IModelRpcReflection {

    #region Descriptor
    /// <summary>File descriptor for IModelRpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IModelRpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9JTW9kZWxScGMucHJvdG8i4AMKDlJlcXVlc3RXcmFwcGVyEhEKCXJlcXVl",
            "c3RJZBgBIAEoDRI7ChdzZWxlY3RFbGVtZW50SWRzUmVxdWVzdBgCIAEoCzIY",
            "LlNlbGVjdEVsZW1lbnRJZHNSZXF1ZXN0SAASMwoTZXhwb3J0TWVzaGVzUmVx",
            "dWVzdBgDIAEoCzIULkV4cG9ydE1lc2hlc1JlcXVlc3RIABIpCg50ZXh0dXJl",
            "UmVxdWVzdBgEIAEoCzIPLlRleHR1cmVSZXF1ZXN0SAASNwoVZWxlbWVudFRv",
            "b2x0aXBSZXF1ZXN0GAUgASgLMhYuRWxlbWVudFRvb2x0aXBSZXF1ZXN0SAAS",
            "NwoVcHJvamVjdEV4dGVudHNSZXF1ZXN0GAYgASgLMhYuUHJvamVjdEV4dGVu",
            "dHNSZXF1ZXN0SAASMQoSY2FtZXJhVmlld3NSZXF1ZXN0GAcgASgLMhMuQ2Ft",
            "ZXJhVmlld3NSZXF1ZXN0SAASPQoYZWxlbWVudFByb3BlcnRpZXNSZXF1ZXN0",
            "GAggASgLMhkuRWxlbWVudFByb3BlcnRpZXNSZXF1ZXN0SAASMwoTZWxlbWVu",
            "dEFBQkJzUmVxdWVzdBgJIAEoCzIULkVsZW1lbnRBQUJCc1JlcXVlc3RIAEIF",
            "CgNtc2ci3QMKDFJlcGx5V3JhcHBlchIRCglyZXF1ZXN0SWQYASABKA0SHQoV",
            "cmVxdWVzdEhhc01vcmVSZXBsaWVzGAIgASgIEjcKFXNlbGVjdEVsZW1lbnRJ",
            "ZHNSZXBseRgDIAEoCzIWLlNlbGVjdEVsZW1lbnRJZHNSZXBseUgAEi8KEWV4",
            "cG9ydE1lc2hlc1JlcGx5GAQgASgLMhIuRXhwb3J0TWVzaGVzUmVwbHlIABIl",
            "Cgx0ZXh0dXJlUmVwbHkYBSABKAsyDS5UZXh0dXJlUmVwbHlIABIzChNlbGVt",
            "ZW50VG9vbHRpcFJlcGx5GAYgASgLMhQuRWxlbWVudFRvb2x0aXBSZXBseUgA",
            "EjMKE3Byb2plY3RFeHRlbnRzUmVwbHkYByABKAsyFC5Qcm9qZWN0RXh0ZW50",
            "c1JlcGx5SAASLQoQY2FtZXJhVmlld3NSZXBseRgIIAEoCzIRLkNhbWVyYVZp",
            "ZXdzUmVwbHlIABI5ChZlbGVtZW50UHJvcGVydGllc1JlcGx5GAkgASgLMhcu",
            "RWxlbWVudFByb3BlcnRpZXNSZXBseUgAEi8KEWVsZW1lbnRBQUJCc1JlcGx5",
            "GAogASgLMhIuRWxlbWVudEFBQkJzUmVwbHlIAEIFCgNtc2ciLwoXU2VsZWN0",
            "RWxlbWVudElkc1JlcXVlc3QSFAoMc2VsZWN0RmlsdGVyGAEgASgJIisKFVNl",
            "bGVjdEVsZW1lbnRJZHNSZXBseRISCgplbGVtZW50SWRzGAEgAygJIjsKE0V4",
            "cG9ydE1lc2hlc1JlcXVlc3QSEgoKZWxlbWVudElkcxgBIAMoCRIQCghjaG9y",
            "ZFRvbBgCIAEoASKDAQoRRXhwb3J0TWVzaGVzUmVwbHkSEQoJZWxlbWVudElk",
            "GAEgASgJEg0KBWNvbG9yGAIgASgNEhIKCmluZGV4Q291bnQYAyABKA0SEwoL",
            "dmVydGV4Q291bnQYBCABKA0SEAoIbWVzaERhdGEYBSABKAwSEQoJdGV4dHVy",
            "ZUlkGAYgASgJIiMKDlRleHR1cmVSZXF1ZXN0EhEKCXRleHR1cmVJZBgBIAEo",
            "CSI2CgxUZXh0dXJlUmVwbHkSEQoJdGV4dHVyZUlkGAEgASgJEhMKC3RleHR1",
            "cmVEYXRhGAIgASgMIioKFUVsZW1lbnRUb29sdGlwUmVxdWVzdBIRCgllbGVt",
            "ZW50SWQYASABKAkiZwoTRWxlbWVudFRvb2x0aXBSZXBseRIRCgllbGVtZW50",
            "SWQYASABKAkSEgoKY2xhc3NMYWJlbBgCIAEoCRIVCg1jYXRlZ29yeUxhYmVs",
            "GAMgASgJEhIKCm1vZGVsTGFiZWwYBCABKAkiFwoVUHJvamVjdEV4dGVudHNS",
            "ZXF1ZXN0ImkKE1Byb2plY3RFeHRlbnRzUmVwbHkSDAoEbWluWBgBIAEoARIM",
            "CgRtaW5ZGAIgASgBEgwKBG1pbloYAyABKAESDAoEbWF4WBgEIAEoARIMCgRt",
            "YXhZGAUgASgBEgwKBG1heFoYBiABKAEiFAoSQ2FtZXJhVmlld3NSZXF1ZXN0",
            "Ip4BChBDYW1lcmFWaWV3c1JlcGx5EhEKCWVsZW1lbnRJZBgBIAEoCRIUCgxk",
            "aXNwbGF5TGFiZWwYAiABKAkSEQoJZXllUG9pbnRYGAMgASgBEhEKCWV5ZVBv",
            "aW50WRgEIAEoARIRCglleWVQb2ludFoYBSABKAESCwoDeWF3GAYgASgBEg0K",
            "BXBpdGNoGAcgASgBEgwKBHJvbGwYCCABKAEiLQoYRWxlbWVudFByb3BlcnRp",
            "ZXNSZXF1ZXN0EhEKCWVsZW1lbnRJZBgBIAEoCSJEChZFbGVtZW50UHJvcGVy",
            "dGllc1JlcGx5EioKBHJvb3QYASABKAsyHC5FbGVtZW50UHJvcGVydGllc1Jl",
            "cGx5RW50cnkiawobRWxlbWVudFByb3BlcnRpZXNSZXBseUVudHJ5Eg0KBWxh",
            "YmVsGAEgASgJEg0KBXZhbHVlGAIgASgJEi4KCGNoaWxkcmVuGAMgAygLMhwu",
            "RWxlbWVudFByb3BlcnRpZXNSZXBseUVudHJ5IjQKE0VsZW1lbnRBQUJCc1Jl",
            "cXVlc3QSDQoFbGltaXQYASABKAUSDgoGb2Zmc2V0GAIgASgFIjUKEUVsZW1l",
            "bnRBQUJCc1JlcGx5EiAKBWJveGVzGAEgAygLMhEuRWxlbWVudEFBQkJFbnRy",
            "eSJ5ChBFbGVtZW50QUFCQkVudHJ5EhEKCWVsZW1lbnRJZBgBIAEoCRIMCgRt",
            "aW5YGAIgASgBEgwKBG1pblkYAyABKAESDAoEbWluWhgEIAEoARIMCgRtYXhY",
            "GAUgASgBEgwKBG1heFkYBiABKAESDAoEbWF4WhgHIAEoAUITqgIQQmVudGxl",
            "eS5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.RequestWrapper), global::Bentley.Protobuf.RequestWrapper.Parser, new[]{ "RequestId", "SelectElementIdsRequest", "ExportMeshesRequest", "TextureRequest", "ElementTooltipRequest", "ProjectExtentsRequest", "CameraViewsRequest", "ElementPropertiesRequest", "ElementAABBsRequest" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ReplyWrapper), global::Bentley.Protobuf.ReplyWrapper.Parser, new[]{ "RequestId", "RequestHasMoreReplies", "SelectElementIdsReply", "ExportMeshesReply", "TextureReply", "ElementTooltipReply", "ProjectExtentsReply", "CameraViewsReply", "ElementPropertiesReply", "ElementAABBsReply" }, new[]{ "Msg" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.SelectElementIdsRequest), global::Bentley.Protobuf.SelectElementIdsRequest.Parser, new[]{ "SelectFilter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.SelectElementIdsReply), global::Bentley.Protobuf.SelectElementIdsReply.Parser, new[]{ "ElementIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ExportMeshesRequest), global::Bentley.Protobuf.ExportMeshesRequest.Parser, new[]{ "ElementIds", "ChordTol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ExportMeshesReply), global::Bentley.Protobuf.ExportMeshesReply.Parser, new[]{ "ElementId", "Color", "IndexCount", "VertexCount", "MeshData", "TextureId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.TextureRequest), global::Bentley.Protobuf.TextureRequest.Parser, new[]{ "TextureId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.TextureReply), global::Bentley.Protobuf.TextureReply.Parser, new[]{ "TextureId", "TextureData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementTooltipRequest), global::Bentley.Protobuf.ElementTooltipRequest.Parser, new[]{ "ElementId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementTooltipReply), global::Bentley.Protobuf.ElementTooltipReply.Parser, new[]{ "ElementId", "ClassLabel", "CategoryLabel", "ModelLabel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ProjectExtentsRequest), global::Bentley.Protobuf.ProjectExtentsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ProjectExtentsReply), global::Bentley.Protobuf.ProjectExtentsReply.Parser, new[]{ "MinX", "MinY", "MinZ", "MaxX", "MaxY", "MaxZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.CameraViewsRequest), global::Bentley.Protobuf.CameraViewsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.CameraViewsReply), global::Bentley.Protobuf.CameraViewsReply.Parser, new[]{ "ElementId", "DisplayLabel", "EyePointX", "EyePointY", "EyePointZ", "Yaw", "Pitch", "Roll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementPropertiesRequest), global::Bentley.Protobuf.ElementPropertiesRequest.Parser, new[]{ "ElementId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementPropertiesReply), global::Bentley.Protobuf.ElementPropertiesReply.Parser, new[]{ "Root" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementPropertiesReplyEntry), global::Bentley.Protobuf.ElementPropertiesReplyEntry.Parser, new[]{ "Label", "Value", "Children" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementAABBsRequest), global::Bentley.Protobuf.ElementAABBsRequest.Parser, new[]{ "Limit", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementAABBsReply), global::Bentley.Protobuf.ElementAABBsReply.Parser, new[]{ "Boxes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bentley.Protobuf.ElementAABBEntry), global::Bentley.Protobuf.ElementAABBEntry.Parser, new[]{ "ElementId", "MinX", "MinY", "MinZ", "MaxX", "MaxY", "MaxZ" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RequestWrapper : pb::IMessage<RequestWrapper> {
    private static readonly pb::MessageParser<RequestWrapper> _parser = new pb::MessageParser<RequestWrapper>(() => new RequestWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper(RequestWrapper other) : this() {
      requestId_ = other.requestId_;
      switch (other.MsgCase) {
        case MsgOneofCase.SelectElementIdsRequest:
          SelectElementIdsRequest = other.SelectElementIdsRequest.Clone();
          break;
        case MsgOneofCase.ExportMeshesRequest:
          ExportMeshesRequest = other.ExportMeshesRequest.Clone();
          break;
        case MsgOneofCase.TextureRequest:
          TextureRequest = other.TextureRequest.Clone();
          break;
        case MsgOneofCase.ElementTooltipRequest:
          ElementTooltipRequest = other.ElementTooltipRequest.Clone();
          break;
        case MsgOneofCase.ProjectExtentsRequest:
          ProjectExtentsRequest = other.ProjectExtentsRequest.Clone();
          break;
        case MsgOneofCase.CameraViewsRequest:
          CameraViewsRequest = other.CameraViewsRequest.Clone();
          break;
        case MsgOneofCase.ElementPropertiesRequest:
          ElementPropertiesRequest = other.ElementPropertiesRequest.Clone();
          break;
        case MsgOneofCase.ElementAABBsRequest:
          ElementAABBsRequest = other.ElementAABBsRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper Clone() {
      return new RequestWrapper(this);
    }

    /// <summary>Field number for the "requestId" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private uint requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "selectElementIdsRequest" field.</summary>
    public const int SelectElementIdsRequestFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.SelectElementIdsRequest SelectElementIdsRequest {
      get { return msgCase_ == MsgOneofCase.SelectElementIdsRequest ? (global::Bentley.Protobuf.SelectElementIdsRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SelectElementIdsRequest;
      }
    }

    /// <summary>Field number for the "exportMeshesRequest" field.</summary>
    public const int ExportMeshesRequestFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ExportMeshesRequest ExportMeshesRequest {
      get { return msgCase_ == MsgOneofCase.ExportMeshesRequest ? (global::Bentley.Protobuf.ExportMeshesRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ExportMeshesRequest;
      }
    }

    /// <summary>Field number for the "textureRequest" field.</summary>
    public const int TextureRequestFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.TextureRequest TextureRequest {
      get { return msgCase_ == MsgOneofCase.TextureRequest ? (global::Bentley.Protobuf.TextureRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TextureRequest;
      }
    }

    /// <summary>Field number for the "elementTooltipRequest" field.</summary>
    public const int ElementTooltipRequestFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementTooltipRequest ElementTooltipRequest {
      get { return msgCase_ == MsgOneofCase.ElementTooltipRequest ? (global::Bentley.Protobuf.ElementTooltipRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementTooltipRequest;
      }
    }

    /// <summary>Field number for the "projectExtentsRequest" field.</summary>
    public const int ProjectExtentsRequestFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ProjectExtentsRequest ProjectExtentsRequest {
      get { return msgCase_ == MsgOneofCase.ProjectExtentsRequest ? (global::Bentley.Protobuf.ProjectExtentsRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ProjectExtentsRequest;
      }
    }

    /// <summary>Field number for the "cameraViewsRequest" field.</summary>
    public const int CameraViewsRequestFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.CameraViewsRequest CameraViewsRequest {
      get { return msgCase_ == MsgOneofCase.CameraViewsRequest ? (global::Bentley.Protobuf.CameraViewsRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CameraViewsRequest;
      }
    }

    /// <summary>Field number for the "elementPropertiesRequest" field.</summary>
    public const int ElementPropertiesRequestFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementPropertiesRequest ElementPropertiesRequest {
      get { return msgCase_ == MsgOneofCase.ElementPropertiesRequest ? (global::Bentley.Protobuf.ElementPropertiesRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementPropertiesRequest;
      }
    }

    /// <summary>Field number for the "elementAABBsRequest" field.</summary>
    public const int ElementAABBsRequestFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementAABBsRequest ElementAABBsRequest {
      get { return msgCase_ == MsgOneofCase.ElementAABBsRequest ? (global::Bentley.Protobuf.ElementAABBsRequest) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementAABBsRequest;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      SelectElementIdsRequest = 2,
      ExportMeshesRequest = 3,
      TextureRequest = 4,
      ElementTooltipRequest = 5,
      ProjectExtentsRequest = 6,
      CameraViewsRequest = 7,
      ElementPropertiesRequest = 8,
      ElementAABBsRequest = 9,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (!object.Equals(SelectElementIdsRequest, other.SelectElementIdsRequest)) return false;
      if (!object.Equals(ExportMeshesRequest, other.ExportMeshesRequest)) return false;
      if (!object.Equals(TextureRequest, other.TextureRequest)) return false;
      if (!object.Equals(ElementTooltipRequest, other.ElementTooltipRequest)) return false;
      if (!object.Equals(ProjectExtentsRequest, other.ProjectExtentsRequest)) return false;
      if (!object.Equals(CameraViewsRequest, other.CameraViewsRequest)) return false;
      if (!object.Equals(ElementPropertiesRequest, other.ElementPropertiesRequest)) return false;
      if (!object.Equals(ElementAABBsRequest, other.ElementAABBsRequest)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (msgCase_ == MsgOneofCase.SelectElementIdsRequest) hash ^= SelectElementIdsRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.ExportMeshesRequest) hash ^= ExportMeshesRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.TextureRequest) hash ^= TextureRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementTooltipRequest) hash ^= ElementTooltipRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.ProjectExtentsRequest) hash ^= ProjectExtentsRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.CameraViewsRequest) hash ^= CameraViewsRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementPropertiesRequest) hash ^= ElementPropertiesRequest.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementAABBsRequest) hash ^= ElementAABBsRequest.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (msgCase_ == MsgOneofCase.SelectElementIdsRequest) {
        output.WriteRawTag(18);
        output.WriteMessage(SelectElementIdsRequest);
      }
      if (msgCase_ == MsgOneofCase.ExportMeshesRequest) {
        output.WriteRawTag(26);
        output.WriteMessage(ExportMeshesRequest);
      }
      if (msgCase_ == MsgOneofCase.TextureRequest) {
        output.WriteRawTag(34);
        output.WriteMessage(TextureRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementTooltipRequest) {
        output.WriteRawTag(42);
        output.WriteMessage(ElementTooltipRequest);
      }
      if (msgCase_ == MsgOneofCase.ProjectExtentsRequest) {
        output.WriteRawTag(50);
        output.WriteMessage(ProjectExtentsRequest);
      }
      if (msgCase_ == MsgOneofCase.CameraViewsRequest) {
        output.WriteRawTag(58);
        output.WriteMessage(CameraViewsRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementPropertiesRequest) {
        output.WriteRawTag(66);
        output.WriteMessage(ElementPropertiesRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementAABBsRequest) {
        output.WriteRawTag(74);
        output.WriteMessage(ElementAABBsRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (msgCase_ == MsgOneofCase.SelectElementIdsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectElementIdsRequest);
      }
      if (msgCase_ == MsgOneofCase.ExportMeshesRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExportMeshesRequest);
      }
      if (msgCase_ == MsgOneofCase.TextureRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementTooltipRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementTooltipRequest);
      }
      if (msgCase_ == MsgOneofCase.ProjectExtentsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjectExtentsRequest);
      }
      if (msgCase_ == MsgOneofCase.CameraViewsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraViewsRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementPropertiesRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementPropertiesRequest);
      }
      if (msgCase_ == MsgOneofCase.ElementAABBsRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementAABBsRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWrapper other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.SelectElementIdsRequest:
          if (SelectElementIdsRequest == null) {
            SelectElementIdsRequest = new global::Bentley.Protobuf.SelectElementIdsRequest();
          }
          SelectElementIdsRequest.MergeFrom(other.SelectElementIdsRequest);
          break;
        case MsgOneofCase.ExportMeshesRequest:
          if (ExportMeshesRequest == null) {
            ExportMeshesRequest = new global::Bentley.Protobuf.ExportMeshesRequest();
          }
          ExportMeshesRequest.MergeFrom(other.ExportMeshesRequest);
          break;
        case MsgOneofCase.TextureRequest:
          if (TextureRequest == null) {
            TextureRequest = new global::Bentley.Protobuf.TextureRequest();
          }
          TextureRequest.MergeFrom(other.TextureRequest);
          break;
        case MsgOneofCase.ElementTooltipRequest:
          if (ElementTooltipRequest == null) {
            ElementTooltipRequest = new global::Bentley.Protobuf.ElementTooltipRequest();
          }
          ElementTooltipRequest.MergeFrom(other.ElementTooltipRequest);
          break;
        case MsgOneofCase.ProjectExtentsRequest:
          if (ProjectExtentsRequest == null) {
            ProjectExtentsRequest = new global::Bentley.Protobuf.ProjectExtentsRequest();
          }
          ProjectExtentsRequest.MergeFrom(other.ProjectExtentsRequest);
          break;
        case MsgOneofCase.CameraViewsRequest:
          if (CameraViewsRequest == null) {
            CameraViewsRequest = new global::Bentley.Protobuf.CameraViewsRequest();
          }
          CameraViewsRequest.MergeFrom(other.CameraViewsRequest);
          break;
        case MsgOneofCase.ElementPropertiesRequest:
          if (ElementPropertiesRequest == null) {
            ElementPropertiesRequest = new global::Bentley.Protobuf.ElementPropertiesRequest();
          }
          ElementPropertiesRequest.MergeFrom(other.ElementPropertiesRequest);
          break;
        case MsgOneofCase.ElementAABBsRequest:
          if (ElementAABBsRequest == null) {
            ElementAABBsRequest = new global::Bentley.Protobuf.ElementAABBsRequest();
          }
          ElementAABBsRequest.MergeFrom(other.ElementAABBsRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 18: {
            global::Bentley.Protobuf.SelectElementIdsRequest subBuilder = new global::Bentley.Protobuf.SelectElementIdsRequest();
            if (msgCase_ == MsgOneofCase.SelectElementIdsRequest) {
              subBuilder.MergeFrom(SelectElementIdsRequest);
            }
            input.ReadMessage(subBuilder);
            SelectElementIdsRequest = subBuilder;
            break;
          }
          case 26: {
            global::Bentley.Protobuf.ExportMeshesRequest subBuilder = new global::Bentley.Protobuf.ExportMeshesRequest();
            if (msgCase_ == MsgOneofCase.ExportMeshesRequest) {
              subBuilder.MergeFrom(ExportMeshesRequest);
            }
            input.ReadMessage(subBuilder);
            ExportMeshesRequest = subBuilder;
            break;
          }
          case 34: {
            global::Bentley.Protobuf.TextureRequest subBuilder = new global::Bentley.Protobuf.TextureRequest();
            if (msgCase_ == MsgOneofCase.TextureRequest) {
              subBuilder.MergeFrom(TextureRequest);
            }
            input.ReadMessage(subBuilder);
            TextureRequest = subBuilder;
            break;
          }
          case 42: {
            global::Bentley.Protobuf.ElementTooltipRequest subBuilder = new global::Bentley.Protobuf.ElementTooltipRequest();
            if (msgCase_ == MsgOneofCase.ElementTooltipRequest) {
              subBuilder.MergeFrom(ElementTooltipRequest);
            }
            input.ReadMessage(subBuilder);
            ElementTooltipRequest = subBuilder;
            break;
          }
          case 50: {
            global::Bentley.Protobuf.ProjectExtentsRequest subBuilder = new global::Bentley.Protobuf.ProjectExtentsRequest();
            if (msgCase_ == MsgOneofCase.ProjectExtentsRequest) {
              subBuilder.MergeFrom(ProjectExtentsRequest);
            }
            input.ReadMessage(subBuilder);
            ProjectExtentsRequest = subBuilder;
            break;
          }
          case 58: {
            global::Bentley.Protobuf.CameraViewsRequest subBuilder = new global::Bentley.Protobuf.CameraViewsRequest();
            if (msgCase_ == MsgOneofCase.CameraViewsRequest) {
              subBuilder.MergeFrom(CameraViewsRequest);
            }
            input.ReadMessage(subBuilder);
            CameraViewsRequest = subBuilder;
            break;
          }
          case 66: {
            global::Bentley.Protobuf.ElementPropertiesRequest subBuilder = new global::Bentley.Protobuf.ElementPropertiesRequest();
            if (msgCase_ == MsgOneofCase.ElementPropertiesRequest) {
              subBuilder.MergeFrom(ElementPropertiesRequest);
            }
            input.ReadMessage(subBuilder);
            ElementPropertiesRequest = subBuilder;
            break;
          }
          case 74: {
            global::Bentley.Protobuf.ElementAABBsRequest subBuilder = new global::Bentley.Protobuf.ElementAABBsRequest();
            if (msgCase_ == MsgOneofCase.ElementAABBsRequest) {
              subBuilder.MergeFrom(ElementAABBsRequest);
            }
            input.ReadMessage(subBuilder);
            ElementAABBsRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReplyWrapper : pb::IMessage<ReplyWrapper> {
    private static readonly pb::MessageParser<ReplyWrapper> _parser = new pb::MessageParser<ReplyWrapper>(() => new ReplyWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReplyWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyWrapper(ReplyWrapper other) : this() {
      requestId_ = other.requestId_;
      requestHasMoreReplies_ = other.requestHasMoreReplies_;
      switch (other.MsgCase) {
        case MsgOneofCase.SelectElementIdsReply:
          SelectElementIdsReply = other.SelectElementIdsReply.Clone();
          break;
        case MsgOneofCase.ExportMeshesReply:
          ExportMeshesReply = other.ExportMeshesReply.Clone();
          break;
        case MsgOneofCase.TextureReply:
          TextureReply = other.TextureReply.Clone();
          break;
        case MsgOneofCase.ElementTooltipReply:
          ElementTooltipReply = other.ElementTooltipReply.Clone();
          break;
        case MsgOneofCase.ProjectExtentsReply:
          ProjectExtentsReply = other.ProjectExtentsReply.Clone();
          break;
        case MsgOneofCase.CameraViewsReply:
          CameraViewsReply = other.CameraViewsReply.Clone();
          break;
        case MsgOneofCase.ElementPropertiesReply:
          ElementPropertiesReply = other.ElementPropertiesReply.Clone();
          break;
        case MsgOneofCase.ElementAABBsReply:
          ElementAABBsReply = other.ElementAABBsReply.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReplyWrapper Clone() {
      return new ReplyWrapper(this);
    }

    /// <summary>Field number for the "requestId" field.</summary>
    public const int RequestIdFieldNumber = 1;
    private uint requestId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RequestId {
      get { return requestId_; }
      set {
        requestId_ = value;
      }
    }

    /// <summary>Field number for the "requestHasMoreReplies" field.</summary>
    public const int RequestHasMoreRepliesFieldNumber = 2;
    private bool requestHasMoreReplies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequestHasMoreReplies {
      get { return requestHasMoreReplies_; }
      set {
        requestHasMoreReplies_ = value;
      }
    }

    /// <summary>Field number for the "selectElementIdsReply" field.</summary>
    public const int SelectElementIdsReplyFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.SelectElementIdsReply SelectElementIdsReply {
      get { return msgCase_ == MsgOneofCase.SelectElementIdsReply ? (global::Bentley.Protobuf.SelectElementIdsReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.SelectElementIdsReply;
      }
    }

    /// <summary>Field number for the "exportMeshesReply" field.</summary>
    public const int ExportMeshesReplyFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ExportMeshesReply ExportMeshesReply {
      get { return msgCase_ == MsgOneofCase.ExportMeshesReply ? (global::Bentley.Protobuf.ExportMeshesReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ExportMeshesReply;
      }
    }

    /// <summary>Field number for the "textureReply" field.</summary>
    public const int TextureReplyFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.TextureReply TextureReply {
      get { return msgCase_ == MsgOneofCase.TextureReply ? (global::Bentley.Protobuf.TextureReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.TextureReply;
      }
    }

    /// <summary>Field number for the "elementTooltipReply" field.</summary>
    public const int ElementTooltipReplyFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementTooltipReply ElementTooltipReply {
      get { return msgCase_ == MsgOneofCase.ElementTooltipReply ? (global::Bentley.Protobuf.ElementTooltipReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementTooltipReply;
      }
    }

    /// <summary>Field number for the "projectExtentsReply" field.</summary>
    public const int ProjectExtentsReplyFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ProjectExtentsReply ProjectExtentsReply {
      get { return msgCase_ == MsgOneofCase.ProjectExtentsReply ? (global::Bentley.Protobuf.ProjectExtentsReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ProjectExtentsReply;
      }
    }

    /// <summary>Field number for the "cameraViewsReply" field.</summary>
    public const int CameraViewsReplyFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.CameraViewsReply CameraViewsReply {
      get { return msgCase_ == MsgOneofCase.CameraViewsReply ? (global::Bentley.Protobuf.CameraViewsReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.CameraViewsReply;
      }
    }

    /// <summary>Field number for the "elementPropertiesReply" field.</summary>
    public const int ElementPropertiesReplyFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementPropertiesReply ElementPropertiesReply {
      get { return msgCase_ == MsgOneofCase.ElementPropertiesReply ? (global::Bentley.Protobuf.ElementPropertiesReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementPropertiesReply;
      }
    }

    /// <summary>Field number for the "elementAABBsReply" field.</summary>
    public const int ElementAABBsReplyFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementAABBsReply ElementAABBsReply {
      get { return msgCase_ == MsgOneofCase.ElementAABBsReply ? (global::Bentley.Protobuf.ElementAABBsReply) msg_ : null; }
      set {
        msg_ = value;
        msgCase_ = value == null ? MsgOneofCase.None : MsgOneofCase.ElementAABBsReply;
      }
    }

    private object msg_;
    /// <summary>Enum of possible cases for the "msg" oneof.</summary>
    public enum MsgOneofCase {
      None = 0,
      SelectElementIdsReply = 3,
      ExportMeshesReply = 4,
      TextureReply = 5,
      ElementTooltipReply = 6,
      ProjectExtentsReply = 7,
      CameraViewsReply = 8,
      ElementPropertiesReply = 9,
      ElementAABBsReply = 10,
    }
    private MsgOneofCase msgCase_ = MsgOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MsgOneofCase MsgCase {
      get { return msgCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMsg() {
      msgCase_ = MsgOneofCase.None;
      msg_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReplyWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReplyWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (RequestHasMoreReplies != other.RequestHasMoreReplies) return false;
      if (!object.Equals(SelectElementIdsReply, other.SelectElementIdsReply)) return false;
      if (!object.Equals(ExportMeshesReply, other.ExportMeshesReply)) return false;
      if (!object.Equals(TextureReply, other.TextureReply)) return false;
      if (!object.Equals(ElementTooltipReply, other.ElementTooltipReply)) return false;
      if (!object.Equals(ProjectExtentsReply, other.ProjectExtentsReply)) return false;
      if (!object.Equals(CameraViewsReply, other.CameraViewsReply)) return false;
      if (!object.Equals(ElementPropertiesReply, other.ElementPropertiesReply)) return false;
      if (!object.Equals(ElementAABBsReply, other.ElementAABBsReply)) return false;
      if (MsgCase != other.MsgCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestId != 0) hash ^= RequestId.GetHashCode();
      if (RequestHasMoreReplies != false) hash ^= RequestHasMoreReplies.GetHashCode();
      if (msgCase_ == MsgOneofCase.SelectElementIdsReply) hash ^= SelectElementIdsReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.ExportMeshesReply) hash ^= ExportMeshesReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.TextureReply) hash ^= TextureReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementTooltipReply) hash ^= ElementTooltipReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.ProjectExtentsReply) hash ^= ProjectExtentsReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.CameraViewsReply) hash ^= CameraViewsReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementPropertiesReply) hash ^= ElementPropertiesReply.GetHashCode();
      if (msgCase_ == MsgOneofCase.ElementAABBsReply) hash ^= ElementAABBsReply.GetHashCode();
      hash ^= (int) msgCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RequestId);
      }
      if (RequestHasMoreReplies != false) {
        output.WriteRawTag(16);
        output.WriteBool(RequestHasMoreReplies);
      }
      if (msgCase_ == MsgOneofCase.SelectElementIdsReply) {
        output.WriteRawTag(26);
        output.WriteMessage(SelectElementIdsReply);
      }
      if (msgCase_ == MsgOneofCase.ExportMeshesReply) {
        output.WriteRawTag(34);
        output.WriteMessage(ExportMeshesReply);
      }
      if (msgCase_ == MsgOneofCase.TextureReply) {
        output.WriteRawTag(42);
        output.WriteMessage(TextureReply);
      }
      if (msgCase_ == MsgOneofCase.ElementTooltipReply) {
        output.WriteRawTag(50);
        output.WriteMessage(ElementTooltipReply);
      }
      if (msgCase_ == MsgOneofCase.ProjectExtentsReply) {
        output.WriteRawTag(58);
        output.WriteMessage(ProjectExtentsReply);
      }
      if (msgCase_ == MsgOneofCase.CameraViewsReply) {
        output.WriteRawTag(66);
        output.WriteMessage(CameraViewsReply);
      }
      if (msgCase_ == MsgOneofCase.ElementPropertiesReply) {
        output.WriteRawTag(74);
        output.WriteMessage(ElementPropertiesReply);
      }
      if (msgCase_ == MsgOneofCase.ElementAABBsReply) {
        output.WriteRawTag(82);
        output.WriteMessage(ElementAABBsReply);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RequestId);
      }
      if (RequestHasMoreReplies != false) {
        size += 1 + 1;
      }
      if (msgCase_ == MsgOneofCase.SelectElementIdsReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectElementIdsReply);
      }
      if (msgCase_ == MsgOneofCase.ExportMeshesReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExportMeshesReply);
      }
      if (msgCase_ == MsgOneofCase.TextureReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TextureReply);
      }
      if (msgCase_ == MsgOneofCase.ElementTooltipReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementTooltipReply);
      }
      if (msgCase_ == MsgOneofCase.ProjectExtentsReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProjectExtentsReply);
      }
      if (msgCase_ == MsgOneofCase.CameraViewsReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraViewsReply);
      }
      if (msgCase_ == MsgOneofCase.ElementPropertiesReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementPropertiesReply);
      }
      if (msgCase_ == MsgOneofCase.ElementAABBsReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ElementAABBsReply);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReplyWrapper other) {
      if (other == null) {
        return;
      }
      if (other.RequestId != 0) {
        RequestId = other.RequestId;
      }
      if (other.RequestHasMoreReplies != false) {
        RequestHasMoreReplies = other.RequestHasMoreReplies;
      }
      switch (other.MsgCase) {
        case MsgOneofCase.SelectElementIdsReply:
          if (SelectElementIdsReply == null) {
            SelectElementIdsReply = new global::Bentley.Protobuf.SelectElementIdsReply();
          }
          SelectElementIdsReply.MergeFrom(other.SelectElementIdsReply);
          break;
        case MsgOneofCase.ExportMeshesReply:
          if (ExportMeshesReply == null) {
            ExportMeshesReply = new global::Bentley.Protobuf.ExportMeshesReply();
          }
          ExportMeshesReply.MergeFrom(other.ExportMeshesReply);
          break;
        case MsgOneofCase.TextureReply:
          if (TextureReply == null) {
            TextureReply = new global::Bentley.Protobuf.TextureReply();
          }
          TextureReply.MergeFrom(other.TextureReply);
          break;
        case MsgOneofCase.ElementTooltipReply:
          if (ElementTooltipReply == null) {
            ElementTooltipReply = new global::Bentley.Protobuf.ElementTooltipReply();
          }
          ElementTooltipReply.MergeFrom(other.ElementTooltipReply);
          break;
        case MsgOneofCase.ProjectExtentsReply:
          if (ProjectExtentsReply == null) {
            ProjectExtentsReply = new global::Bentley.Protobuf.ProjectExtentsReply();
          }
          ProjectExtentsReply.MergeFrom(other.ProjectExtentsReply);
          break;
        case MsgOneofCase.CameraViewsReply:
          if (CameraViewsReply == null) {
            CameraViewsReply = new global::Bentley.Protobuf.CameraViewsReply();
          }
          CameraViewsReply.MergeFrom(other.CameraViewsReply);
          break;
        case MsgOneofCase.ElementPropertiesReply:
          if (ElementPropertiesReply == null) {
            ElementPropertiesReply = new global::Bentley.Protobuf.ElementPropertiesReply();
          }
          ElementPropertiesReply.MergeFrom(other.ElementPropertiesReply);
          break;
        case MsgOneofCase.ElementAABBsReply:
          if (ElementAABBsReply == null) {
            ElementAABBsReply = new global::Bentley.Protobuf.ElementAABBsReply();
          }
          ElementAABBsReply.MergeFrom(other.ElementAABBsReply);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RequestId = input.ReadUInt32();
            break;
          }
          case 16: {
            RequestHasMoreReplies = input.ReadBool();
            break;
          }
          case 26: {
            global::Bentley.Protobuf.SelectElementIdsReply subBuilder = new global::Bentley.Protobuf.SelectElementIdsReply();
            if (msgCase_ == MsgOneofCase.SelectElementIdsReply) {
              subBuilder.MergeFrom(SelectElementIdsReply);
            }
            input.ReadMessage(subBuilder);
            SelectElementIdsReply = subBuilder;
            break;
          }
          case 34: {
            global::Bentley.Protobuf.ExportMeshesReply subBuilder = new global::Bentley.Protobuf.ExportMeshesReply();
            if (msgCase_ == MsgOneofCase.ExportMeshesReply) {
              subBuilder.MergeFrom(ExportMeshesReply);
            }
            input.ReadMessage(subBuilder);
            ExportMeshesReply = subBuilder;
            break;
          }
          case 42: {
            global::Bentley.Protobuf.TextureReply subBuilder = new global::Bentley.Protobuf.TextureReply();
            if (msgCase_ == MsgOneofCase.TextureReply) {
              subBuilder.MergeFrom(TextureReply);
            }
            input.ReadMessage(subBuilder);
            TextureReply = subBuilder;
            break;
          }
          case 50: {
            global::Bentley.Protobuf.ElementTooltipReply subBuilder = new global::Bentley.Protobuf.ElementTooltipReply();
            if (msgCase_ == MsgOneofCase.ElementTooltipReply) {
              subBuilder.MergeFrom(ElementTooltipReply);
            }
            input.ReadMessage(subBuilder);
            ElementTooltipReply = subBuilder;
            break;
          }
          case 58: {
            global::Bentley.Protobuf.ProjectExtentsReply subBuilder = new global::Bentley.Protobuf.ProjectExtentsReply();
            if (msgCase_ == MsgOneofCase.ProjectExtentsReply) {
              subBuilder.MergeFrom(ProjectExtentsReply);
            }
            input.ReadMessage(subBuilder);
            ProjectExtentsReply = subBuilder;
            break;
          }
          case 66: {
            global::Bentley.Protobuf.CameraViewsReply subBuilder = new global::Bentley.Protobuf.CameraViewsReply();
            if (msgCase_ == MsgOneofCase.CameraViewsReply) {
              subBuilder.MergeFrom(CameraViewsReply);
            }
            input.ReadMessage(subBuilder);
            CameraViewsReply = subBuilder;
            break;
          }
          case 74: {
            global::Bentley.Protobuf.ElementPropertiesReply subBuilder = new global::Bentley.Protobuf.ElementPropertiesReply();
            if (msgCase_ == MsgOneofCase.ElementPropertiesReply) {
              subBuilder.MergeFrom(ElementPropertiesReply);
            }
            input.ReadMessage(subBuilder);
            ElementPropertiesReply = subBuilder;
            break;
          }
          case 82: {
            global::Bentley.Protobuf.ElementAABBsReply subBuilder = new global::Bentley.Protobuf.ElementAABBsReply();
            if (msgCase_ == MsgOneofCase.ElementAABBsReply) {
              subBuilder.MergeFrom(ElementAABBsReply);
            }
            input.ReadMessage(subBuilder);
            ElementAABBsReply = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectElementIdsRequest : pb::IMessage<SelectElementIdsRequest> {
    private static readonly pb::MessageParser<SelectElementIdsRequest> _parser = new pb::MessageParser<SelectElementIdsRequest>(() => new SelectElementIdsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectElementIdsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsRequest(SelectElementIdsRequest other) : this() {
      selectFilter_ = other.selectFilter_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsRequest Clone() {
      return new SelectElementIdsRequest(this);
    }

    /// <summary>Field number for the "selectFilter" field.</summary>
    public const int SelectFilterFieldNumber = 1;
    private string selectFilter_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SelectFilter {
      get { return selectFilter_; }
      set {
        selectFilter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectElementIdsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectElementIdsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SelectFilter != other.SelectFilter) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SelectFilter.Length != 0) hash ^= SelectFilter.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SelectFilter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SelectFilter);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SelectFilter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SelectFilter);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectElementIdsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SelectFilter.Length != 0) {
        SelectFilter = other.SelectFilter;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SelectFilter = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectElementIdsReply : pb::IMessage<SelectElementIdsReply> {
    private static readonly pb::MessageParser<SelectElementIdsReply> _parser = new pb::MessageParser<SelectElementIdsReply>(() => new SelectElementIdsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectElementIdsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsReply(SelectElementIdsReply other) : this() {
      elementIds_ = other.elementIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectElementIdsReply Clone() {
      return new SelectElementIdsReply(this);
    }

    /// <summary>Field number for the "elementIds" field.</summary>
    public const int ElementIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_elementIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> elementIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ElementIds {
      get { return elementIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectElementIdsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectElementIdsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elementIds_.Equals(other.elementIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elementIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elementIds_.WriteTo(output, _repeated_elementIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elementIds_.CalculateSize(_repeated_elementIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectElementIdsReply other) {
      if (other == null) {
        return;
      }
      elementIds_.Add(other.elementIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elementIds_.AddEntriesFrom(input, _repeated_elementIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExportMeshesRequest : pb::IMessage<ExportMeshesRequest> {
    private static readonly pb::MessageParser<ExportMeshesRequest> _parser = new pb::MessageParser<ExportMeshesRequest>(() => new ExportMeshesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportMeshesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesRequest(ExportMeshesRequest other) : this() {
      elementIds_ = other.elementIds_.Clone();
      chordTol_ = other.chordTol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesRequest Clone() {
      return new ExportMeshesRequest(this);
    }

    /// <summary>Field number for the "elementIds" field.</summary>
    public const int ElementIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_elementIds_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> elementIds_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ElementIds {
      get { return elementIds_; }
    }

    /// <summary>Field number for the "chordTol" field.</summary>
    public const int ChordTolFieldNumber = 2;
    private double chordTol_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ChordTol {
      get { return chordTol_; }
      set {
        chordTol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportMeshesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportMeshesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elementIds_.Equals(other.elementIds_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(ChordTol, other.ChordTol)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elementIds_.GetHashCode();
      if (ChordTol != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(ChordTol);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      elementIds_.WriteTo(output, _repeated_elementIds_codec);
      if (ChordTol != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(ChordTol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elementIds_.CalculateSize(_repeated_elementIds_codec);
      if (ChordTol != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportMeshesRequest other) {
      if (other == null) {
        return;
      }
      elementIds_.Add(other.elementIds_);
      if (other.ChordTol != 0D) {
        ChordTol = other.ChordTol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elementIds_.AddEntriesFrom(input, _repeated_elementIds_codec);
            break;
          }
          case 17: {
            ChordTol = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExportMeshesReply : pb::IMessage<ExportMeshesReply> {
    private static readonly pb::MessageParser<ExportMeshesReply> _parser = new pb::MessageParser<ExportMeshesReply>(() => new ExportMeshesReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportMeshesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesReply(ExportMeshesReply other) : this() {
      elementId_ = other.elementId_;
      color_ = other.color_;
      indexCount_ = other.indexCount_;
      vertexCount_ = other.vertexCount_;
      meshData_ = other.meshData_;
      textureId_ = other.textureId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportMeshesReply Clone() {
      return new ExportMeshesReply(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    /// <summary>
    /// Will always be present on valid mesh
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "indexCount" field.</summary>
    public const int IndexCountFieldNumber = 3;
    private uint indexCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexCount {
      get { return indexCount_; }
      set {
        indexCount_ = value;
      }
    }

    /// <summary>Field number for the "vertexCount" field.</summary>
    public const int VertexCountFieldNumber = 4;
    private uint vertexCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint VertexCount {
      get { return vertexCount_; }
      set {
        vertexCount_ = value;
      }
    }

    /// <summary>Field number for the "meshData" field.</summary>
    public const int MeshDataFieldNumber = 5;
    private pb::ByteString meshData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MeshData {
      get { return meshData_; }
      set {
        meshData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "textureId" field.</summary>
    public const int TextureIdFieldNumber = 6;
    private string textureId_ = "";
    /// <summary>
    /// Will only be present if the mesh has a texture
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextureId {
      get { return textureId_; }
      set {
        textureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportMeshesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportMeshesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (Color != other.Color) return false;
      if (IndexCount != other.IndexCount) return false;
      if (VertexCount != other.VertexCount) return false;
      if (MeshData != other.MeshData) return false;
      if (TextureId != other.TextureId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (IndexCount != 0) hash ^= IndexCount.GetHashCode();
      if (VertexCount != 0) hash ^= VertexCount.GetHashCode();
      if (MeshData.Length != 0) hash ^= MeshData.GetHashCode();
      if (TextureId.Length != 0) hash ^= TextureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (Color != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Color);
      }
      if (IndexCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IndexCount);
      }
      if (VertexCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(VertexCount);
      }
      if (MeshData.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(MeshData);
      }
      if (TextureId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TextureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (IndexCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexCount);
      }
      if (VertexCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(VertexCount);
      }
      if (MeshData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MeshData);
      }
      if (TextureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportMeshesReply other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.IndexCount != 0) {
        IndexCount = other.IndexCount;
      }
      if (other.VertexCount != 0) {
        VertexCount = other.VertexCount;
      }
      if (other.MeshData.Length != 0) {
        MeshData = other.MeshData;
      }
      if (other.TextureId.Length != 0) {
        TextureId = other.TextureId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 16: {
            Color = input.ReadUInt32();
            break;
          }
          case 24: {
            IndexCount = input.ReadUInt32();
            break;
          }
          case 32: {
            VertexCount = input.ReadUInt32();
            break;
          }
          case 42: {
            MeshData = input.ReadBytes();
            break;
          }
          case 50: {
            TextureId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextureRequest : pb::IMessage<TextureRequest> {
    private static readonly pb::MessageParser<TextureRequest> _parser = new pb::MessageParser<TextureRequest>(() => new TextureRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextureRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureRequest(TextureRequest other) : this() {
      textureId_ = other.textureId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureRequest Clone() {
      return new TextureRequest(this);
    }

    /// <summary>Field number for the "textureId" field.</summary>
    public const int TextureIdFieldNumber = 1;
    private string textureId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextureId {
      get { return textureId_; }
      set {
        textureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextureRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextureRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TextureId != other.TextureId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TextureId.Length != 0) hash ^= TextureId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextureId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TextureId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextureId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextureRequest other) {
      if (other == null) {
        return;
      }
      if (other.TextureId.Length != 0) {
        TextureId = other.TextureId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TextureId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TextureReply : pb::IMessage<TextureReply> {
    private static readonly pb::MessageParser<TextureReply> _parser = new pb::MessageParser<TextureReply>(() => new TextureReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextureReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureReply(TextureReply other) : this() {
      textureId_ = other.textureId_;
      textureData_ = other.textureData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextureReply Clone() {
      return new TextureReply(this);
    }

    /// <summary>Field number for the "textureId" field.</summary>
    public const int TextureIdFieldNumber = 1;
    private string textureId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TextureId {
      get { return textureId_; }
      set {
        textureId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "textureData" field.</summary>
    public const int TextureDataFieldNumber = 2;
    private pb::ByteString textureData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TextureData {
      get { return textureData_; }
      set {
        textureData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextureReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextureReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TextureId != other.TextureId) return false;
      if (TextureData != other.TextureData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TextureId.Length != 0) hash ^= TextureId.GetHashCode();
      if (TextureData.Length != 0) hash ^= TextureData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TextureId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TextureId);
      }
      if (TextureData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TextureData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TextureId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextureId);
      }
      if (TextureData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TextureData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextureReply other) {
      if (other == null) {
        return;
      }
      if (other.TextureId.Length != 0) {
        TextureId = other.TextureId;
      }
      if (other.TextureData.Length != 0) {
        TextureData = other.TextureData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TextureId = input.ReadString();
            break;
          }
          case 18: {
            TextureData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementTooltipRequest : pb::IMessage<ElementTooltipRequest> {
    private static readonly pb::MessageParser<ElementTooltipRequest> _parser = new pb::MessageParser<ElementTooltipRequest>(() => new ElementTooltipRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementTooltipRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipRequest(ElementTooltipRequest other) : this() {
      elementId_ = other.elementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipRequest Clone() {
      return new ElementTooltipRequest(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementTooltipRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementTooltipRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementTooltipRequest other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementTooltipReply : pb::IMessage<ElementTooltipReply> {
    private static readonly pb::MessageParser<ElementTooltipReply> _parser = new pb::MessageParser<ElementTooltipReply>(() => new ElementTooltipReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementTooltipReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipReply(ElementTooltipReply other) : this() {
      elementId_ = other.elementId_;
      classLabel_ = other.classLabel_;
      categoryLabel_ = other.categoryLabel_;
      modelLabel_ = other.modelLabel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementTooltipReply Clone() {
      return new ElementTooltipReply(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "classLabel" field.</summary>
    public const int ClassLabelFieldNumber = 2;
    private string classLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassLabel {
      get { return classLabel_; }
      set {
        classLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "categoryLabel" field.</summary>
    public const int CategoryLabelFieldNumber = 3;
    private string categoryLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CategoryLabel {
      get { return categoryLabel_; }
      set {
        categoryLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modelLabel" field.</summary>
    public const int ModelLabelFieldNumber = 4;
    private string modelLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelLabel {
      get { return modelLabel_; }
      set {
        modelLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementTooltipReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementTooltipReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (ClassLabel != other.ClassLabel) return false;
      if (CategoryLabel != other.CategoryLabel) return false;
      if (ModelLabel != other.ModelLabel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (ClassLabel.Length != 0) hash ^= ClassLabel.GetHashCode();
      if (CategoryLabel.Length != 0) hash ^= CategoryLabel.GetHashCode();
      if (ModelLabel.Length != 0) hash ^= ModelLabel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (ClassLabel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClassLabel);
      }
      if (CategoryLabel.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CategoryLabel);
      }
      if (ModelLabel.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModelLabel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (ClassLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassLabel);
      }
      if (CategoryLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CategoryLabel);
      }
      if (ModelLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelLabel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementTooltipReply other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.ClassLabel.Length != 0) {
        ClassLabel = other.ClassLabel;
      }
      if (other.CategoryLabel.Length != 0) {
        CategoryLabel = other.CategoryLabel;
      }
      if (other.ModelLabel.Length != 0) {
        ModelLabel = other.ModelLabel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 18: {
            ClassLabel = input.ReadString();
            break;
          }
          case 26: {
            CategoryLabel = input.ReadString();
            break;
          }
          case 34: {
            ModelLabel = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectExtentsRequest : pb::IMessage<ProjectExtentsRequest> {
    private static readonly pb::MessageParser<ProjectExtentsRequest> _parser = new pb::MessageParser<ProjectExtentsRequest>(() => new ProjectExtentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectExtentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsRequest(ProjectExtentsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsRequest Clone() {
      return new ProjectExtentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectExtentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectExtentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectExtentsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ProjectExtentsReply : pb::IMessage<ProjectExtentsReply> {
    private static readonly pb::MessageParser<ProjectExtentsReply> _parser = new pb::MessageParser<ProjectExtentsReply>(() => new ProjectExtentsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectExtentsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsReply(ProjectExtentsReply other) : this() {
      minX_ = other.minX_;
      minY_ = other.minY_;
      minZ_ = other.minZ_;
      maxX_ = other.maxX_;
      maxY_ = other.maxY_;
      maxZ_ = other.maxZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectExtentsReply Clone() {
      return new ProjectExtentsReply(this);
    }

    /// <summary>Field number for the "minX" field.</summary>
    public const int MinXFieldNumber = 1;
    private double minX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "minY" field.</summary>
    public const int MinYFieldNumber = 2;
    private double minY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinY {
      get { return minY_; }
      set {
        minY_ = value;
      }
    }

    /// <summary>Field number for the "minZ" field.</summary>
    public const int MinZFieldNumber = 3;
    private double minZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinZ {
      get { return minZ_; }
      set {
        minZ_ = value;
      }
    }

    /// <summary>Field number for the "maxX" field.</summary>
    public const int MaxXFieldNumber = 4;
    private double maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "maxY" field.</summary>
    public const int MaxYFieldNumber = 5;
    private double maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    /// <summary>Field number for the "maxZ" field.</summary>
    public const int MaxZFieldNumber = 6;
    private double maxZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxZ {
      get { return maxZ_; }
      set {
        maxZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectExtentsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectExtentsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinX, other.MinX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinY, other.MinY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinZ, other.MinZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxX, other.MaxX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxY, other.MaxY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxZ, other.MaxZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinX);
      if (MinY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinY);
      if (MinZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinZ);
      if (MaxX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxX);
      if (MaxY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxY);
      if (MaxZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinX != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(MinX);
      }
      if (MinY != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MinY);
      }
      if (MinZ != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinZ);
      }
      if (MaxX != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MaxX);
      }
      if (MaxY != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxY);
      }
      if (MaxZ != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MaxZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinX != 0D) {
        size += 1 + 8;
      }
      if (MinY != 0D) {
        size += 1 + 8;
      }
      if (MinZ != 0D) {
        size += 1 + 8;
      }
      if (MaxX != 0D) {
        size += 1 + 8;
      }
      if (MaxY != 0D) {
        size += 1 + 8;
      }
      if (MaxZ != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectExtentsReply other) {
      if (other == null) {
        return;
      }
      if (other.MinX != 0D) {
        MinX = other.MinX;
      }
      if (other.MinY != 0D) {
        MinY = other.MinY;
      }
      if (other.MinZ != 0D) {
        MinZ = other.MinZ;
      }
      if (other.MaxX != 0D) {
        MaxX = other.MaxX;
      }
      if (other.MaxY != 0D) {
        MaxY = other.MaxY;
      }
      if (other.MaxZ != 0D) {
        MaxZ = other.MaxZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            MinX = input.ReadDouble();
            break;
          }
          case 17: {
            MinY = input.ReadDouble();
            break;
          }
          case 25: {
            MinZ = input.ReadDouble();
            break;
          }
          case 33: {
            MaxX = input.ReadDouble();
            break;
          }
          case 41: {
            MaxY = input.ReadDouble();
            break;
          }
          case 49: {
            MaxZ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraViewsRequest : pb::IMessage<CameraViewsRequest> {
    private static readonly pb::MessageParser<CameraViewsRequest> _parser = new pb::MessageParser<CameraViewsRequest>(() => new CameraViewsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraViewsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsRequest(CameraViewsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsRequest Clone() {
      return new CameraViewsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraViewsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraViewsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraViewsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CameraViewsReply : pb::IMessage<CameraViewsReply> {
    private static readonly pb::MessageParser<CameraViewsReply> _parser = new pb::MessageParser<CameraViewsReply>(() => new CameraViewsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraViewsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsReply(CameraViewsReply other) : this() {
      elementId_ = other.elementId_;
      displayLabel_ = other.displayLabel_;
      eyePointX_ = other.eyePointX_;
      eyePointY_ = other.eyePointY_;
      eyePointZ_ = other.eyePointZ_;
      yaw_ = other.yaw_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraViewsReply Clone() {
      return new CameraViewsReply(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "displayLabel" field.</summary>
    public const int DisplayLabelFieldNumber = 2;
    private string displayLabel_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayLabel {
      get { return displayLabel_; }
      set {
        displayLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eyePointX" field.</summary>
    public const int EyePointXFieldNumber = 3;
    private double eyePointX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EyePointX {
      get { return eyePointX_; }
      set {
        eyePointX_ = value;
      }
    }

    /// <summary>Field number for the "eyePointY" field.</summary>
    public const int EyePointYFieldNumber = 4;
    private double eyePointY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EyePointY {
      get { return eyePointY_; }
      set {
        eyePointY_ = value;
      }
    }

    /// <summary>Field number for the "eyePointZ" field.</summary>
    public const int EyePointZFieldNumber = 5;
    private double eyePointZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EyePointZ {
      get { return eyePointZ_; }
      set {
        eyePointZ_ = value;
      }
    }

    /// <summary>Field number for the "yaw" field.</summary>
    public const int YawFieldNumber = 6;
    private double yaw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Yaw {
      get { return yaw_; }
      set {
        yaw_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 7;
    private double pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 8;
    private double roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraViewsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraViewsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (DisplayLabel != other.DisplayLabel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyePointX, other.EyePointX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyePointY, other.EyePointY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(EyePointZ, other.EyePointZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Yaw, other.Yaw)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Roll, other.Roll)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (DisplayLabel.Length != 0) hash ^= DisplayLabel.GetHashCode();
      if (EyePointX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyePointX);
      if (EyePointY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyePointY);
      if (EyePointZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(EyePointZ);
      if (Yaw != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Yaw);
      if (Pitch != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pitch);
      if (Roll != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Roll);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (DisplayLabel.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayLabel);
      }
      if (EyePointX != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(EyePointX);
      }
      if (EyePointY != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(EyePointY);
      }
      if (EyePointZ != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(EyePointZ);
      }
      if (Yaw != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Yaw);
      }
      if (Pitch != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Pitch);
      }
      if (Roll != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (DisplayLabel.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayLabel);
      }
      if (EyePointX != 0D) {
        size += 1 + 8;
      }
      if (EyePointY != 0D) {
        size += 1 + 8;
      }
      if (EyePointZ != 0D) {
        size += 1 + 8;
      }
      if (Yaw != 0D) {
        size += 1 + 8;
      }
      if (Pitch != 0D) {
        size += 1 + 8;
      }
      if (Roll != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraViewsReply other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.DisplayLabel.Length != 0) {
        DisplayLabel = other.DisplayLabel;
      }
      if (other.EyePointX != 0D) {
        EyePointX = other.EyePointX;
      }
      if (other.EyePointY != 0D) {
        EyePointY = other.EyePointY;
      }
      if (other.EyePointZ != 0D) {
        EyePointZ = other.EyePointZ;
      }
      if (other.Yaw != 0D) {
        Yaw = other.Yaw;
      }
      if (other.Pitch != 0D) {
        Pitch = other.Pitch;
      }
      if (other.Roll != 0D) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 18: {
            DisplayLabel = input.ReadString();
            break;
          }
          case 25: {
            EyePointX = input.ReadDouble();
            break;
          }
          case 33: {
            EyePointY = input.ReadDouble();
            break;
          }
          case 41: {
            EyePointZ = input.ReadDouble();
            break;
          }
          case 49: {
            Yaw = input.ReadDouble();
            break;
          }
          case 57: {
            Pitch = input.ReadDouble();
            break;
          }
          case 65: {
            Roll = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementPropertiesRequest : pb::IMessage<ElementPropertiesRequest> {
    private static readonly pb::MessageParser<ElementPropertiesRequest> _parser = new pb::MessageParser<ElementPropertiesRequest>(() => new ElementPropertiesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementPropertiesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesRequest(ElementPropertiesRequest other) : this() {
      elementId_ = other.elementId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesRequest Clone() {
      return new ElementPropertiesRequest(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementPropertiesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementPropertiesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementPropertiesRequest other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementPropertiesReply : pb::IMessage<ElementPropertiesReply> {
    private static readonly pb::MessageParser<ElementPropertiesReply> _parser = new pb::MessageParser<ElementPropertiesReply>(() => new ElementPropertiesReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementPropertiesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReply(ElementPropertiesReply other) : this() {
      root_ = other.root_ != null ? other.root_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReply Clone() {
      return new ElementPropertiesReply(this);
    }

    /// <summary>Field number for the "root" field.</summary>
    public const int RootFieldNumber = 1;
    private global::Bentley.Protobuf.ElementPropertiesReplyEntry root_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bentley.Protobuf.ElementPropertiesReplyEntry Root {
      get { return root_; }
      set {
        root_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementPropertiesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementPropertiesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Root, other.Root)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (root_ != null) hash ^= Root.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (root_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Root);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (root_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Root);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementPropertiesReply other) {
      if (other == null) {
        return;
      }
      if (other.root_ != null) {
        if (root_ == null) {
          Root = new global::Bentley.Protobuf.ElementPropertiesReplyEntry();
        }
        Root.MergeFrom(other.Root);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (root_ == null) {
              Root = new global::Bentley.Protobuf.ElementPropertiesReplyEntry();
            }
            input.ReadMessage(Root);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementPropertiesReplyEntry : pb::IMessage<ElementPropertiesReplyEntry> {
    private static readonly pb::MessageParser<ElementPropertiesReplyEntry> _parser = new pb::MessageParser<ElementPropertiesReplyEntry>(() => new ElementPropertiesReplyEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementPropertiesReplyEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReplyEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReplyEntry(ElementPropertiesReplyEntry other) : this() {
      label_ = other.label_;
      value_ = other.value_;
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementPropertiesReplyEntry Clone() {
      return new ElementPropertiesReplyEntry(this);
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 1;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Bentley.Protobuf.ElementPropertiesReplyEntry> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::Bentley.Protobuf.ElementPropertiesReplyEntry.Parser);
    private readonly pbc::RepeatedField<global::Bentley.Protobuf.ElementPropertiesReplyEntry> children_ = new pbc::RepeatedField<global::Bentley.Protobuf.ElementPropertiesReplyEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bentley.Protobuf.ElementPropertiesReplyEntry> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementPropertiesReplyEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementPropertiesReplyEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Label != other.Label) return false;
      if (Value != other.Value) return false;
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Label.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Label);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementPropertiesReplyEntry other) {
      if (other == null) {
        return;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Label = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// N by volume, descending
  /// </summary>
  public sealed partial class ElementAABBsRequest : pb::IMessage<ElementAABBsRequest> {
    private static readonly pb::MessageParser<ElementAABBsRequest> _parser = new pb::MessageParser<ElementAABBsRequest>(() => new ElementAABBsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementAABBsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsRequest(ElementAABBsRequest other) : this() {
      limit_ = other.limit_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsRequest Clone() {
      return new ElementAABBsRequest(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private int limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private int offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementAABBsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementAABBsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0) hash ^= Limit.GetHashCode();
      if (Offset != 0) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Limit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Limit);
      }
      if (Offset != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
      }
      if (Offset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementAABBsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      if (other.Offset != 0) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Limit = input.ReadInt32();
            break;
          }
          case 16: {
            Offset = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementAABBsReply : pb::IMessage<ElementAABBsReply> {
    private static readonly pb::MessageParser<ElementAABBsReply> _parser = new pb::MessageParser<ElementAABBsReply>(() => new ElementAABBsReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementAABBsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsReply(ElementAABBsReply other) : this() {
      boxes_ = other.boxes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBsReply Clone() {
      return new ElementAABBsReply(this);
    }

    /// <summary>Field number for the "boxes" field.</summary>
    public const int BoxesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Bentley.Protobuf.ElementAABBEntry> _repeated_boxes_codec
        = pb::FieldCodec.ForMessage(10, global::Bentley.Protobuf.ElementAABBEntry.Parser);
    private readonly pbc::RepeatedField<global::Bentley.Protobuf.ElementAABBEntry> boxes_ = new pbc::RepeatedField<global::Bentley.Protobuf.ElementAABBEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Bentley.Protobuf.ElementAABBEntry> Boxes {
      get { return boxes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementAABBsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementAABBsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boxes_.Equals(other.boxes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boxes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boxes_.WriteTo(output, _repeated_boxes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boxes_.CalculateSize(_repeated_boxes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementAABBsReply other) {
      if (other == null) {
        return;
      }
      boxes_.Add(other.boxes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boxes_.AddEntriesFrom(input, _repeated_boxes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElementAABBEntry : pb::IMessage<ElementAABBEntry> {
    private static readonly pb::MessageParser<ElementAABBEntry> _parser = new pb::MessageParser<ElementAABBEntry>(() => new ElementAABBEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElementAABBEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bentley.Protobuf.IModelRpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBEntry(ElementAABBEntry other) : this() {
      elementId_ = other.elementId_;
      minX_ = other.minX_;
      minY_ = other.minY_;
      minZ_ = other.minZ_;
      maxX_ = other.maxX_;
      maxY_ = other.maxY_;
      maxZ_ = other.maxZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementAABBEntry Clone() {
      return new ElementAABBEntry(this);
    }

    /// <summary>Field number for the "elementId" field.</summary>
    public const int ElementIdFieldNumber = 1;
    private string elementId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ElementId {
      get { return elementId_; }
      set {
        elementId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "minX" field.</summary>
    public const int MinXFieldNumber = 2;
    private double minX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinX {
      get { return minX_; }
      set {
        minX_ = value;
      }
    }

    /// <summary>Field number for the "minY" field.</summary>
    public const int MinYFieldNumber = 3;
    private double minY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinY {
      get { return minY_; }
      set {
        minY_ = value;
      }
    }

    /// <summary>Field number for the "minZ" field.</summary>
    public const int MinZFieldNumber = 4;
    private double minZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinZ {
      get { return minZ_; }
      set {
        minZ_ = value;
      }
    }

    /// <summary>Field number for the "maxX" field.</summary>
    public const int MaxXFieldNumber = 5;
    private double maxX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxX {
      get { return maxX_; }
      set {
        maxX_ = value;
      }
    }

    /// <summary>Field number for the "maxY" field.</summary>
    public const int MaxYFieldNumber = 6;
    private double maxY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxY {
      get { return maxY_; }
      set {
        maxY_ = value;
      }
    }

    /// <summary>Field number for the "maxZ" field.</summary>
    public const int MaxZFieldNumber = 7;
    private double maxZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MaxZ {
      get { return maxZ_; }
      set {
        maxZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElementAABBEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElementAABBEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ElementId != other.ElementId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinX, other.MinX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinY, other.MinY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinZ, other.MinZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxX, other.MaxX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxY, other.MaxY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MaxZ, other.MaxZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ElementId.Length != 0) hash ^= ElementId.GetHashCode();
      if (MinX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinX);
      if (MinY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinY);
      if (MinZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinZ);
      if (MaxX != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxX);
      if (MaxY != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxY);
      if (MaxZ != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MaxZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ElementId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ElementId);
      }
      if (MinX != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(MinX);
      }
      if (MinY != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(MinY);
      }
      if (MinZ != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(MinZ);
      }
      if (MaxX != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(MaxX);
      }
      if (MaxY != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(MaxY);
      }
      if (MaxZ != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(MaxZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ElementId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ElementId);
      }
      if (MinX != 0D) {
        size += 1 + 8;
      }
      if (MinY != 0D) {
        size += 1 + 8;
      }
      if (MinZ != 0D) {
        size += 1 + 8;
      }
      if (MaxX != 0D) {
        size += 1 + 8;
      }
      if (MaxY != 0D) {
        size += 1 + 8;
      }
      if (MaxZ != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElementAABBEntry other) {
      if (other == null) {
        return;
      }
      if (other.ElementId.Length != 0) {
        ElementId = other.ElementId;
      }
      if (other.MinX != 0D) {
        MinX = other.MinX;
      }
      if (other.MinY != 0D) {
        MinY = other.MinY;
      }
      if (other.MinZ != 0D) {
        MinZ = other.MinZ;
      }
      if (other.MaxX != 0D) {
        MaxX = other.MaxX;
      }
      if (other.MaxY != 0D) {
        MaxY = other.MaxY;
      }
      if (other.MaxZ != 0D) {
        MaxZ = other.MaxZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ElementId = input.ReadString();
            break;
          }
          case 17: {
            MinX = input.ReadDouble();
            break;
          }
          case 25: {
            MinY = input.ReadDouble();
            break;
          }
          case 33: {
            MinZ = input.ReadDouble();
            break;
          }
          case 41: {
            MaxX = input.ReadDouble();
            break;
          }
          case 49: {
            MaxY = input.ReadDouble();
            break;
          }
          case 57: {
            MaxZ = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
